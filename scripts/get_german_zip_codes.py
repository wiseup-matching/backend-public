from datetime import datetime
import requests
import json

# Overpass API endpoint
OVERPASS_URL = "https://overpass-api.de/api/interpreter"

# Overpass QL query: get all postal_code boundaries in Germany
overpass_query = """
[out:json][timeout:600];
area["ISO3166-1"="DE"][admin_level=2]->.germany;
(
  relation["boundary"="postal_code"](area.germany);
);
out center;
"""

def fetch_postal_codes():
    print("Sending request to Overpass API, this may take several minutes...")
    response = requests.post(OVERPASS_URL, data={'data': overpass_query})

    if response.status_code != 200:
        raise Exception(f"Error fetching data: {response.status_code}")

    print("Parsing response...")
    data = response.json()

    zip_codes = []
    for element in data['elements']:
        tags = element.get('tags', {})
        zip_code = tags.get('postal_code') or tags.get('addr:postcode')

        center = element.get('center')
        if zip_code and center:
            entry = {
                'zip': zip_code,
                'lat': center['lat'],
                'lon': center['lon']
            }
            zip_codes.append(entry)

    print(f"Collected {len(zip_codes)} zip code entries.")
    queryInfo = data['osm3s']
    return zip_codes, queryInfo


def save_to_json(data, queryInfo, filename="german_zip_codes.ts"):
    with open(filename, "w", encoding="utf-8") as f:
        f.write("// This file is auto-generated from scripts/get_german_zip_codes.py\n")
        f.write("// Do not edit this file directly.\n\n")
        f.write(f"/** Query Info: {json.dumps(queryInfo, ensure_ascii=False, indent=2)} */\n\n")
        f.write("export const germanZipCodes = ")
        json.dump(data, f, ensure_ascii=False, indent=2)
        f.write(";")
    print(f"Saved to {filename}")


if __name__ == "__main__":
    timestamp = datetime.now()
    zip_codes, queryInfo = fetch_postal_codes()
    save_to_json(zip_codes, queryInfo)
    print("This took " + str((datetime.now() - timestamp).total_seconds()) + " seconds.")
